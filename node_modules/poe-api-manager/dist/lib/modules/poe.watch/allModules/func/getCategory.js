"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const watchFetch_1 = __importDefault(require("../fetch/watchFetch"));
/**
 * Fetches data based on the provided query URL and filters it by category name.
 * @param league - The league to fetch the data from.
 * @param type - The type of data to fetch.
 * @param categoryName - The name of the category to filter the data by.
 * @returns A promise that resolves to an array of filtered data items.
 * @throws Throws an error if category name is not provided or if there is an issue fetching or filtering the data.
 */
async function getCategory(league, type, categoryName) {
    try {
        const fetchedData = await (0, watchFetch_1.default)(league, type);
        // Validate category name
        if (!categoryName && categoryName !== "0") {
            throw new Error("Category name is required.");
        }
        // Filter data by category name
        const filteredData = fetchedData.filter((item) => item.group === categoryName);
        // Check if filtered data is empty
        if (filteredData.length === 0) {
            throw new Error(`No data found for category: ${categoryName}`);
        }
        return filteredData;
    }
    catch (error) {
        throw new Error(`Error fetching or filtering data for category: ${error.message}`);
    }
}
;
exports.default = getCategory;
