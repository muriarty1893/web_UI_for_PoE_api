import { BaseTypeModule, BeastModule, DeliriumOrbsModule, DivinationCardModule, EssenceModule, FossilModule, HelmetEnchantModule, IncubatorModule, MapModule, OilModule, ResonatorModule, ScarabModule, SkillGemModule, UniqueAccessoryModule, UniqueArmourModule, UniqueFlaskModule, UniqueJewelModule, UniqueMapModule, UniqueWeaponModule, VialsModule, OmenModule, MemoryModule, InvitationModule, UniqueRelicsModule, ClusterJewelModule, BlightedMapModule, BlightRavagedMapModule, CoffinModule, AllflameEmberModule } from './itemSubmodules/itemSubModules';
/**
 * Represents a module for viewing item-related information in a specific Path of Exile league.
 */
export declare class ItemViewModule {
    /**
     * Represents a submodule for base type item information.
     */
    baseType: BaseTypeModule;
    /**
     * Represents a submodule for beast item information.
     */
    beast: BeastModule;
    /**
     * Represents a submodule for delirium orbs item information.
     */
    deliriumOrbs: DeliriumOrbsModule;
    /**
     * Represents a submodule for divination card item information.
     */
    divinationCard: DivinationCardModule;
    /**
     * Represents a submodule for essence item information.
     */
    essence: EssenceModule;
    /**
     * Represents a submodule for fossil item information.
     */
    fossil: FossilModule;
    /**
     * Represents a submodule for helmet enchant item information.
     */
    helmetEnchant: HelmetEnchantModule;
    /**
     * Represents a submodule for incubator item information.
     */
    incubator: IncubatorModule;
    /**
     * Represents a submodule for map item information.
     */
    map: MapModule;
    /**
     * Represents a submodule for oil item information.
     */
    oil: OilModule;
    /**
     * Represents a submodule for resonator item information.
     */
    resonator: ResonatorModule;
    /**
     * Represents a submodule for scarab item information.
     */
    scarab: ScarabModule;
    /**
     * Represents a submodule for skill gem item information.
     */
    skillGem: SkillGemModule;
    /**
     * Represents a submodule for unique accessory item information.
     */
    uniqueAccessory: UniqueAccessoryModule;
    /**
     * Represents a submodule for unique armour item information.
     */
    uniqueArmour: UniqueArmourModule;
    /**
     * Represents a submodule for unique flask item information.
     */
    uniqueFlask: UniqueFlaskModule;
    /**
     * Represents a submodule for unique jewel item information.
     */
    uniqueJewel: UniqueJewelModule;
    /**
     * Represents a submodule for unique map item information.
     */
    uniqueMap: UniqueMapModule;
    /**
     * Represents a submodule for unique weapon item information.
     */
    uniqueWeapon: UniqueWeaponModule;
    /**
     * Represents a submodule for vials item information.
     */
    vials: VialsModule;
    /**
     * Represents a submodule for omen item information.
     */
    omen: OmenModule;
    /**
     * Represents a submodule for memory item information.
     */
    memory: MemoryModule;
    /**
     * Represents a submodule for invitation item information.
     */
    invitation: InvitationModule;
    /**
     * Represents a submodule for unique relics item information.
     */
    uniqueRelics: UniqueRelicsModule;
    /**
     * Represents a submodule for cluster jewel item information.
     */
    clusterJewel: ClusterJewelModule;
    /**
     * Represents a submodule for blighted map item information.
     */
    blightedMap: BlightedMapModule;
    /**
     * Represents a submodule for blight ravaged map item information.
     */
    blightRavagedMap: BlightRavagedMapModule;
    /**
     * Represents a submodule for coffin item information.
     */
    coffin: CoffinModule;
    /**
     * Creates an instance of AllflameEmberModule.
     */
    allflameEmber: AllflameEmberModule;
    /**
     * Creates a new instance of ItemViewModule.
     * @param league - The Path of Exile league for which the item information is retrieved.
     * @param typeName - The type of item information to retrieve.
     */
    constructor(league: string, typeName: string);
}
